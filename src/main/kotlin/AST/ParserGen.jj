/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\ParserGen.jj */
/*@egen*/
options {
             
                         
}

PARSER_BEGIN(Parser)

package AST;

import java.util.ArrayList;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/

    /** Main entry point. */
    public static ASTStart parse(java.io.InputStream stream) {
        System.out.println("Reading from standard input...");
        Parser t = new Parser(stream);
        ASTStart n = null;
        try {
            n = t.Start();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
        return n;
    }

}

PARSER_END(Parser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN : /* NUMBER */
{
    < NUMBER_LITERAL: (<DIGIT>)+ ("." (<DIGIT>)+)? >
    | < #DIGIT: ["0"-"9"] >
}

TOKEN : /* ARITHMETIC & BOOLEAN OPERATORS */
{
      < PLUS: "+" >
    | < MINUS: "-" >
    | < MUL: "*" >
    | < DIV: "/" >
    | < MOD: "%" >
    | < POWER: "**" >

    | < AND: "&&" >
    | < OR: "||" >
    | < NOT: "!" >

    | < EQ: "==" >
    | < NEQ: "!=" | "=1" >
    | < LT: "<" >
    | < LEQ: "<=" | "=<">
    | < GT: ">" >
    | < GEQ: ">=" | "=>" >

    | < LPAREN: "(" >
    | < RPAREN: ")" >
    | < LBRACE: "[" >
    | < RBRACE: "]" >
    | < LBRACKET: "{" >
    | < RBRACKET: "}" >

    | < ASSIGN : "=" >
    | < ASADD : "=+" | "+=" >
    | < ASSUB : "=-" | "-=" >
    | < ASMUL : "=*" | "*=" >
    | < ASDIV : "=/" | "/=" >
    | < ASMOD : "=%" | "%=" >

    | < INC : "++" >
    | < DEC : "--" >

    | < COMMA : "," >
    | < DOT : "." >
    | < COLON : ":" >
    | < SCOLON : ";" >
    | < ARROW : "->" >

}

TOKEN : /* KEYWORDS */
{
      < BREAK : "break" >
    | < CLASS : "class" >
    | < FALSE : "false" >
    | < FUNC : "func" >
    | < IF : "if" >
    | < LET : "let" >
    | < RETURN : "return" >
    | < TRUE : "true" >
    | < VOID : "void" >
    | < WHILE : "while" >
}

TOKEN : /* IDENTIFIER */
{
    < IDENTIFIER: (<LETTER> | "_") (<LETTER> | <DIGIT> | "_")* >
    | < #LETTER: ["a"-"z", "A"-"Z"] >
}

/** Main production. */
ASTStart Start()        : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    ( Function() )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/* FUNCTION DECLARATION */

void Function()           : {/*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Function */
    try {
/*@egen*/
    FunctionHead()
    Block()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FunctionHead() : {}
{
    <FUNC>/*@bgen(jjtree) Identifier */
           {
             ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ <IDENTIFIER>/*@bgen(jjtree)*/
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
           }
/*@egen*/            
    <LPAREN> DefParamList() <RPAREN>
    (<ARROW> Type())?
}

void DefParamList()             : {/*@bgen(jjtree) FuncParams */
  ASTFuncParams jjtn000 = new ASTFuncParams(JJTFUNCPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FuncParams */
    try {
/*@egen*/
    ( DefParam() ( <COMMA> DefParam())* )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DefParam()               : {/*@bgen(jjtree) #FuncParam( 2) */
  ASTFuncParam jjtn000 = new ASTFuncParam(JJTFUNCPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #FuncParam( 2) */
     try {
/*@egen*//*@bgen(jjtree) Identifier */
     {
       ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
     }
     try {
/*@egen*/
     <IDENTIFIER>/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
       }
     }
/*@egen*/             <COLON> Type()/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000,  2);
       }
     }
/*@egen*/
}



/* CONTROL FLOW & STATEMENTS */

void Block()        : {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
    try {
/*@egen*/
    <LBRACKET> (Statement())* <RBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Statement() : {}
{
      (VarDecl() <SCOLON>)
    | (Expression() <SCOLON>)
    |/*@bgen(jjtree) BreakStmt */
      {
        ASTBreakStmt jjtn001 = new ASTBreakStmt(JJTBREAKSTMT);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ (<BREAK> <SCOLON>)/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/           
    |/*@bgen(jjtree) ReturnStmt */
      {
        ASTReturnStmt jjtn002 = new ASTReturnStmt(JJTRETURNSTMT);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ (<RETURN> <SCOLON>)/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
/*@egen*/            
    | IfStmt()
    | WhileStmt()
}

void VarDecl()             : {/*@bgen(jjtree) #VarDecl( 3) */
  ASTVarDecl jjtn000 = new ASTVarDecl(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #VarDecl( 3) */
    try {
/*@egen*/
    <LET>/*@bgen(jjtree) Identifier */
          {
            ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ <IDENTIFIER>/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/            
    <COLON> Type() <ASSIGN> Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  3);
      }
    }
/*@egen*/
}

void IfStmt()            : {/*@bgen(jjtree) #IfStmt( 2) */
  ASTIfStmt jjtn000 = new ASTIfStmt(JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #IfStmt( 2) */
    try {
/*@egen*/
    <IF>/*@bgen(jjtree) Condition */
         {
           ASTCondition jjtn001 = new ASTCondition(JJTCONDITION);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
         }
/*@egen*/           
    Block()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

void WhileStmt()               : {/*@bgen(jjtree) #WhileStmt( 2) */
  ASTWhileStmt jjtn000 = new ASTWhileStmt(JJTWHILESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #WhileStmt( 2) */
    try {
/*@egen*/
    <WHILE>/*@bgen(jjtree) Condition */
            {
              ASTCondition jjtn001 = new ASTCondition(JJTCONDITION);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/           
    Block()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}


/* DATA CONSTRUCTS? */

void Type()       : {/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/* EXPRESSIONS */

void Expression() : {}
{
    AssignmentExp()
}

void AssignmentExp()                    : {/*@bgen(jjtree) #AssignmentExp(> 1) */
  ASTAssignmentExp jjtn000 = new ASTAssignmentExp(JJTASSIGNMENTEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AssignmentExp(> 1) */
    try {
/*@egen*/
    OrExp()
    (
        (
              ( <ASSIGN>  { jjtn000.type = ASTAssignmentExp.EXP_TYPE.ASSIGN; } )
            | ( <ASADD>   { jjtn000.type = ASTAssignmentExp.EXP_TYPE.APLUS; } )
            | ( <ASSUB>   { jjtn000.type = ASTAssignmentExp.EXP_TYPE.AMINUS; } )
            | ( <ASMUL>   { jjtn000.type = ASTAssignmentExp.EXP_TYPE.AMUL; } )
            | ( <ASDIV>   { jjtn000.type = ASTAssignmentExp.EXP_TYPE.ADIV; } )
            | ( <ASMOD>   { jjtn000.type = ASTAssignmentExp.EXP_TYPE.AMOD; } )
        )
        AssignmentExp()
    )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void OrExp()            : {/*@bgen(jjtree) #OrExp(> 1) */
  ASTOrExp jjtn000 = new ASTOrExp(JJTOREXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #OrExp(> 1) */
    try {
/*@egen*/
    AndExp() ( <OR> AndExp() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}
void AndExp()             : {/*@bgen(jjtree) #AndExp(> 1) */
  ASTAndExp jjtn000 = new ASTAndExp(JJTANDEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AndExp(> 1) */
    try {
/*@egen*/
    BoolExp() ( <AND> BoolExp() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void BoolExp()              : {/*@bgen(jjtree) #BoolExp(> 1) */
  ASTBoolExp jjtn000 = new ASTBoolExp(JJTBOOLEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BoolExp(> 1) */
    try {
/*@egen*/
    AddExp()
    (
        (
              ( <EQ>    { jjtn000.type = ASTBoolExp.EXP_TYPE.EQ; } )
            | ( <NEQ>   { jjtn000.type = ASTBoolExp.EXP_TYPE.NEQ; } )
            | ( <LT>    { jjtn000.type = ASTBoolExp.EXP_TYPE.LT; } )
            | ( <LEQ>   { jjtn000.type = ASTBoolExp.EXP_TYPE.LEQ; } )
            | ( <GT>    { jjtn000.type = ASTBoolExp.EXP_TYPE.GT; } )
            | ( <GEQ>   { jjtn000.type = ASTBoolExp.EXP_TYPE.GEQ; } )
        )
        AddExp()
    )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void AddExp()             : {/*@bgen(jjtree) #AddExp(> 1) */
                              ASTAddExp jjtn000 = new ASTAddExp(JJTADDEXP);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/ ArrayList<ASTAddExp.OP> arr = jjtn000.op; }
{/*@bgen(jjtree) #AddExp(> 1) */
    try {
/*@egen*/
    MulExp() (
        (
              ( <PLUS>    { arr.add(ASTAddExp.OP.PLUS); } )
            | ( <MINUS>   { arr.add(ASTAddExp.OP.MINUS); } )
        )
        MulExp()
    )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}
void MulExp()             : {/*@bgen(jjtree) #MulExp(> 1) */
                              ASTMulExp jjtn000 = new ASTMulExp(JJTMULEXP);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/ ArrayList<ASTMulExp.OP> arr = jjtn000.op; }
{/*@bgen(jjtree) #MulExp(> 1) */
    try {
/*@egen*/
    ExpoExp() (
        (
              ( <MUL>   { arr.add(ASTMulExp.OP.MUL); } )
            | ( <DIV>   { arr.add(ASTMulExp.OP.DIV); } )
            | ( <MOD>   { arr.add(ASTMulExp.OP.MOD); } )
        )
        ExpoExp()
    )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}
void ExpoExp()              : {/*@bgen(jjtree) #ExpoExp(> 1) */
  ASTExpoExp jjtn000 = new ASTExpoExp(JJTEXPOEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ExpoExp(> 1) */
    try {
/*@egen*/
    PrefixExp() ( <POWER> ExpoExp() )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void PrefixExp() : { boolean prefix = false; }
{/*@bgen(jjtree) #PrefixExp( prefix) */
    {
      ASTPrefixExp jjtn001 = new ASTPrefixExp(JJTPREFIXEXP);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        (
            (
                  <INC> { jjtn001.op = ASTPrefixExp.OP.INC; }
                | <DEC> { jjtn001.op = ASTPrefixExp.OP.DEC; }
                | <NOT> { jjtn001.op = ASTPrefixExp.OP.NOT; }
            )
            { prefix = true; }
        )?
        SuffixExp()
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  prefix);
      }
    }
/*@egen*/                   
}
void SuffixExp() : { boolean suffix = false; }
{/*@bgen(jjtree) #SuffixExp( suffix) */
    {
      ASTSuffixExp jjtn001 = new ASTSuffixExp(JJTSUFFIXEXP);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        AccessExp()
        (
            (
                  <INC> { jjtn001.op = ASTSuffixExp.OP.INC; }
                | <DEC> { jjtn001.op = ASTSuffixExp.OP.DEC; }
            )
            { suffix = true; }
        )?
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  suffix);
      }
    }
/*@egen*/                   
}

void AccessExp()                : {/*@bgen(jjtree) #AccessExp(> 1) */
  ASTAccessExp jjtn000 = new ASTAccessExp(JJTACCESSEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AccessExp(> 1) */
    try {
/*@egen*/
    Subscript() ( <DOT> Subscript() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}
void Subscript()                : {/*@bgen(jjtree) #Subscript(> 1) */
  ASTSubscript jjtn000 = new ASTSubscript(JJTSUBSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Subscript(> 1) */
    try {
/*@egen*/
    FunctionCall() ( <LBRACE> Expression() <RBRACE> )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void FunctionCall()                   : {/*@bgen(jjtree) #FunctionCall(> 1) */
  ASTFunctionCall jjtn000 = new ASTFunctionCall(JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #FunctionCall(> 1) */
    try {
/*@egen*/
    ParenExp() ( <LPAREN> ParamList() <RPAREN> )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}
void ParamList()         : {/*@bgen(jjtree) Params */
  ASTParams jjtn000 = new ASTParams(JJTPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Params */
    try {
/*@egen*/
    ( Expression() ( <COMMA> Expression() )* )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ParenExp() : {}
{
    ( <LPAREN> Expression() <RPAREN> ) |/*@bgen(jjtree) #NumberLiteral( 0) */
                                         {
                                           ASTNumberLiteral jjtn001 = new ASTNumberLiteral(JJTNUMBERLITERAL);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
                                         }
                                         try {
/*@egen*/ <NUMBER_LITERAL>/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  0);
                                           }
                                         }
/*@egen*/                   |/*@bgen(jjtree) #Identifier( 0) */
                                                                              {
                                                                                ASTIdentifier jjtn002 = new ASTIdentifier(JJTIDENTIFIER);
                                                                                boolean jjtc002 = true;
                                                                                jjtree.openNodeScope(jjtn002);
                                                                              }
                                                                              try {
/*@egen*/ <IDENTIFIER>/*@bgen(jjtree)*/
                                                                              } finally {
                                                                                if (jjtc002) {
                                                                                  jjtree.closeNodeScope(jjtn002,  0);
                                                                                }
                                                                              }
/*@egen*/               
}
